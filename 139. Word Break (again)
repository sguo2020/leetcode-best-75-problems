class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        
        
        def recurse(s, memo):
            # print(s, memo)
            if s in memo:
                return memo[s]
            if s == '':
                memo[s] = True
                return memo[s]
            for word in wordDict:
                if word in s and s.index(word) == 0 and recurse(s[len(word):], memo):
                    memo[s] = True
                    return memo[s]
            memo[s] = False
            return memo[s]
        memo = {}
        return recurse(s, memo)
        ____________
        s = 'applepenapple'
wordDict = ['apple', 'pen']

def recurse(s, memo):
    print(s, memo, 'yes')
    
    if s in memo:
        print(s,memo, 1)
        return memo[s]
    
    if s == '':
        memo[s] = True
        print(s, memo, 2)
        return memo[s]
    for word in wordDict:
        print(word, wordDict, 'w in d')
        if word in s and s.index(word) == 0 and recurse(s[len(word):], memo):
            memo[s] = True
            print(s, memo, 3)
            return memo[s]
    memo[s] = False
    print(s, memo, 5)
    return memo[s]
memo = {}
print(recurse(s, memo),'e')

output:
applepenapple {} yes
apple ['apple', 'pen'] w in d
penapple {} yes
apple ['apple', 'pen'] w in d
pen ['apple', 'pen'] w in d
apple {} yes
apple ['apple', 'pen'] w in d
 {} yes
 {'': True} 2
apple {'': True, 'apple': True} 3
penapple {'': True, 'apple': True, 'penapple': True} 3
applepenapple {'': True, 'apple': True, 'penapple': True, 'applepenapple': True} 3
True e
