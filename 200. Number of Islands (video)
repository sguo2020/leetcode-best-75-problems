class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid: return 0
        rows, cols = len(grid), len(grid[0])
        visited = set()
        islands = 0
        
        def bfs(r,c):
            dq = collections.deque()
            visited.add((r,c))
            dq.append((r,c))
            
            while dq:
                r,c = dq.popleft()
                directions = [[1,0],[-1,0], [0,1], [0,-1]]
                
                
                for dr, dc in directions:
                    nr, nc = r+dr, c+dc
                    if (nr, nc) not in visited\
                        and nr in range(rows) and nc in range(cols)\
                        and grid[nr][nc] == '1':
                        dq.append((nr, nc))
                        visited.add((nr, nc))
                        

        for r in range(rows):
            for c in range(cols):
                if (r, c) not in visited and grid[r][c] == '1':
                    bfs(r,c)
                    islands += 1
        return islands
