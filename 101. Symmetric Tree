class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """   
        
    
        def isMirror(node_1, node_2):
            if node_1 is None and node_2 is None:
                return True
            if node_1 is None or node_2 is None:
                return False
            return node_1.val == node_2.val and \
                 isMirror(node_1.left, node_2.right) and\
                 isMirror(node_1.right, node_2.left)
        
        return isMirror(root, root)
        ----------------
class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """   
        return self.isMirror(root, root)
    
    def isMirror(self, node_1, node_2):
        if node_1 is None and node_2 is None:
            return True
        if node_1 is None or node_2 is None:
            return False
        return node_1.val == node_2.val and \
             self.isMirror(node_1.left, node_2.right) and\
             self.isMirror(node_1.right, node_2.left)
