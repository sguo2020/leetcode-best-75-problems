from collections import defaultdict
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        
        def precheck():
            chars_required = Counter(word)
            for row in board:
                for char in row:
                    if char in chars_required and chars_required[char] > 0:
                        chars_required[char] -= 1
            for count in chars_required.values():
                if count > 0:
                    return False
            return True
       
        
        if not precheck():
            return False
        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.dfs(board, word, i, j):
                    return True
        return False
    
    def dfs(self, board, word, i, j):
        if board[i][j] == word[0]:
            if not word[1:]:
                return True
            board[i][j] = None
            if i > 0 and self.dfs(board, word[1:], i-1, j):
                return True
            if i < len(board) - 1 and self.dfs(board, word[1:], i+1, j):
                return True
            if j > 0 and self.dfs(board, word[1:], i, j-1):
                return True
            if j < len(board[0]) - 1 and self.dfs(board, word[1:], i, j+1):
                return True
            board[i][j] = word[0]
            return False
        else:
            return False
